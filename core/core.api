syntax = "v1"

service core-api {
	// user login
	@handler UserLoginHandler
	post /user/login (LoginRequest) returns (LoginResponse)

	// user info
	@handler UserInfoHandler
	get /user/info (InfoRequest) returns (InfoResponse)

	// send email code when registeration
	@handler EmailCodeHandler
	post /email/sendcode (EmailCodeRequest) returns (EmailCodeResponse)

	// user register
	@handler UserRegisterHandler
	post /user/register (UserRegisterRequest) returns (UserRegisterResponse)
}

@server (
	middleware: Auth
)
service core-api {
	// file upload
	@handler FileUploadHandler
	post /file/upload (FileUploadRequest) returns (FileUploadResponse)

	// user-file connection
	@handler UserRepositoryHandler
	post /user/repository/save (UserRepositoryRequest) returns (UserRepositoryResponse)

	// user file list
	@handler UserRepositoryListHandler
	get /user/repository/list (UserRepositoryListRequest) returns (UserRepositoryListResponse)

	// rename file
	@handler FileRenameHandler
	post /file/rename (FileRenameRequest) returns (FileRenameResponse)

	// create folder
	@handler FolderCreateHandler
	post /folder/create (FolderCreateRequest) returns (FolderCreateResponse)

	// delete file
	@handler DeleteFileHandler
	post /file/delete (FileDeleteRequest) returns (FileDeleteResponse)

	// move file
	@handler MoveFileHandler
	post /file/move (MoveFileRequest) returns (MoveFileResponse)
}

type LoginRequest {
	UserName string `json:"username"`
	Password string `json:"password"`
}

type LoginResponse {
	Token string `json:"token"`
}

type InfoRequest {
	Identity string `json:"identity"`
}

type InfoResponse {
	UserName string `json:"username"`
	Email    string `json:email`
}

type EmailCodeRequest {
	Email string `json:"email"`
}

type EmailCodeResponse {}

type UserRegisterRequest {
	UserName string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Code     string `json:"code"`
}

type UserRegisterResponse {}

type FileUploadRequest {
	Hash string `json:"hash,optional"`
	Name string `json:"name,optional"`
	Ext  string `json:"ext,optional"`
	Size int64  `json:"size,optional"`
	Path string `json:"path,optional"`
}

type FileUploadResponse {
	Identity string `json:"identity"`
	Ext      string `json:"ext"`
	Name     string `json:"name"`
}

type UserRepositoryRequest {
	ParentId           int    `json:"parentId"`
	RepositoryIdentity string `json:"repositoryIdentity"`
	Ext                string `json:"ext"`
	Name               string `json:"name"`
}

type UserRepositoryResponse {
	Identity string `json:"identity"`
}

type UserRepositoryListRequest {
	Id   int `json:"id,optional"`
	Page int `json:"page,optional"`
	Size int `json:"size,optional"`
}

type UserRepositoryListResponse {
	List  []*UserFile `json:"list"`
	Count int         `json:"count"`
}

type UserFile {
	Id                 int    `json:"id"`
	Identity           string `json:"identity"`
	RepositoryIdentity string `json:"repositoryIdentity"`
	Name               string `json:"name"`
	Ext                string `json:"ext"`
	Path               string `json:"path"`
	Size               int64  `json:"size"`
}

type FileRenameRequest {
	Identity string `json:"identity"`
	NewName  string `json:"newName"`
}

type FileRenameResponse {}

type FolderCreateRequest {
	ParentId int    `json:"parentId"`
	Name     string `json:"name"`
}

type FolderCreateResponse {
	Identity string `json:"identity"`
}

type FileDeleteRequest {
	Identity string `json:"identity"`
}

type FileDeleteResponse {}

type MoveFileRequest {
	Identity       string `json:"identity"`
	ParentIdentity string `json:"parentIdentity"`
}

type MoveFileResponse {}

